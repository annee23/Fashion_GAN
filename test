#!/usr/bin/python3

import argparse
import sys
import os
import numpy as np
np.set_printoptions(threshold=sys.maxsize)
from PIL import Image
import torchvision.transforms as transforms
from torchvision.utils import save_image
from torch.utils.data import DataLoader
from torch.autograd import Variable
import torch
from models import Generator
from datasets import ImageDataset

parser = argparse.ArgumentParser()
parser.add_argument('--batchSize', type=int, default=1, help='size of the batches')
parser.add_argument('--dataroot', type=str, default='datasets/', help='root directory of the dataset')
parser.add_argument('--input_nc', type=int, default=4, help='number of channels of input data')
parser.add_argument('--output_nc', type=int, default=4, help='number of channels of output data')
parser.add_argument('--size', type=int, default=256, help='size of the data (squared assumed)')
parser.add_argument('--cuda', action='store_true', help='use GPU computation')
parser.add_argument('--n_cpu', type=int, default=8, help='number of cpu threads to use during batch generation')
parser.add_argument('--generator_A2B', type=str, default='output/TD_netG_A2B.pth', help='A2B generator checkpoint file')
parser.add_argument('--generator_B2A', type=str, default='output/TD_netG_B2A.pth', help='B2A generator checkpoint file')
opt = parser.parse_args()
# opt.cuda = True
opt.cuda= True
print(opt)

if torch.cuda.is_available() and not opt.cuda:
    print("WARNING: You have a CUDA device, so you should probably run with --cuda")

###### Definition of variables ######
# Networks
# netG_A2B = Generator(opt.input_nc, opt.output_nc)
netG_B2A = Generator(opt.output_nc, opt.input_nc)

if opt.cuda:
    # netG_A2B.cuda()
    netG_B2A.cuda()

# Load state dicts
# netG_A2B.load_state_dict(torch.load(opt.generator_A2B))#map_location=torch.device('cpu')))
netG_B2A.load_state_dict(torch.load(opt.generator_B2A))##)),map_location=torch.device('cpu')))

# Set model's test mode
# netG_A2B.eval()
netG_B2A.eval()

# Inputs & targets memory allocation
Tensor = torch.cuda.FloatTensor if opt.cuda else torch.Tensor
input_A = Tensor(opt.batchSize, opt.input_nc, opt.size, opt.size)
input_B = Tensor(opt.batchSize, opt.output_nc, opt.size, opt.size)

# Dataset loader
transforms_ = [
    transforms.Resize(int(opt.size), Image.NEAREST),
    transforms.CenterCrop(opt.size),
    transforms.ToTensor(),
                transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5)) ]
dataloader = DataLoader(ImageDataset(opt.dataroot, transforms_=transforms_, mode='test'),
                        batch_size=opt.batchSize, shuffle=False, num_workers=opt.n_cpu)
###################################

###### Testing######

# # Create output dirs if they don't exist
# if not os.path.exists('output/A'):
#     os.makedirs('output/A')
# if not os.path.exists('output/B'):
#     os.makedirs('output/B')


# def arrmatrix(fake_A, real_A,real_B):
#     outA = fake_A[0, 0:3, :, :]
#     arrA = real_A[0, 0:3, :, :]
#     arr = real_B[0, 0:3, :, :]
#
#     for i in range(256):
#         for j in range(256):
#             if arr[0][i][j] == -1 and arr[1][i][j] == -1 and arr[2][i][j] == -1:
#                 arr[0][i][j] = 255
#                 arr[1][i][j] = 255
#                 arr[2][i][j] = 255
#
#             elif real_A[0][3][i][j] == -1 or arr[0][i][j] == -0.0745098 or arr[0][i][j] == 0.60784316:
#                 arr[0][i][j] = 1
#                 arr[1][i][j] = 1
#                 arr[2][i][j] = 1
#                 outA[:, i, j] = arrA[:, i, j]
#
#             else:
#                 arr[0][i][j] = 1
#                 arr[1][i][j] = 1
#                 arr[2][i][j] = 1
#
#     return np.multiply(outA, arr)
for idx, batch in enumerate(dataloader):
    # Set model input
    real_A = Variable(input_A.copy_(batch['A']))
    real_B = Variable(input_B.copy_(batch['B']))

    # Generate output
    # fake_B = 0.5*(netG_A2B(real_A).data + 1.0)
    fake_A = 0.5*(netG_B2A(real_B).data + 1.0)

    # Save image files
    outA = fake_A[0,0:3,:,:]
    arrA = real_A[0,0:3,:,:]
    arr = real_B[0,0:3,:,:]

    # print(np.array(arr[0,:,:].cpu()))
    # break
    arr2 = np.zeros((3,256,256))
    for i in range(256):
        for j in range(256):
            if arr[0][i][j]==-1 and arr[1][i][j]==-1 and arr[2][i][j]==-1:
                arr[0][i][j]=255
                arr[1][i][j] = 255
                arr[2][i][j] = 255

            elif real_A[0][3][i][j] == -1 or arr[0][i][j] == -0.0745098 or arr[0][i][j] == 0.60784316:
                arr[0][i][j] = 1
                arr[1][i][j] = 1
                arr[2][i][j] = 1
                outA[:,i,j]=arrA[:,i,j]

            else:
                arr[0][i][j] = 1
                arr[1][i][j] = 1
                arr[2][i][j] = 1

    save_image(np.multiply(outA.cpu(),arr.cpu()), 'output/A/%04d.png' % (idx+1))


    sys.stdout.write('\rGenerated images %04d of %04d' % (idx+1, len(dataloader)))

sys.stdout.write('\n')
###########